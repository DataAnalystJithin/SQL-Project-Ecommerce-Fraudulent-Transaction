use ecommerce;

-- Joins
-- Combine user information with transaction data.
SELECT * FROM customers c
JOIN transactions t ON c.Customer_ID = t.Customer_Id 
ORDER BY c.Customer_ID ASC;

-- Link transaction data with product details.
SELECT * FROM transactions t
JOIN products p ON p.Product_Id = t.Product_Id;

-- Left Join
-- Retrieve all customers along with their transactions.
SELECT * FROM customers LEFT JOIN transactions ON customers.Customer_ID = transactions.Customer_Id;

-- Inner Join
-- Retrieve all transactions along with customer details and product details, but only for transactions above a certain amount:
SELECT * FROM transactions t
INNER JOIN customers c ON t.Customer_Id = c.Customer_ID
INNER JOIN products p ON t.Product_Id = p.Product_Id
AND t.Transaction_Amount >1000;

-- Cross Join
-- Calculate the total number of possible transactions if every customer purchases every product:
SELECT COUNT(*) AS TotalPossibleTransactions
FROM customers CROSS JOIN products;

-- Join with Subquery
-- Retrieve transactions made by customers who reside in the same location as a specific customer.
SELECT t.*, c.Customer_Location
FROM transactions t
JOIN customers c ON t.Customer_Id = c.Customer_ID
WHERE c.Customer_Location = (SELECT Customer_Location FROM customers WHERE Customer_ID = 531);

-- Retrieve the total revenue generated by each product category:
SELECT p.Product_Category, SUM(t.Transaction_Amount) AS Total_Revenue
FROM transactions t
JOIN products p ON t.Product_Id = p.Product_Id
GROUP BY p.Product_Category;


